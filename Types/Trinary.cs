//
// MKAh.Types.Trinary.cs
//
// Author:
//       M.A. (https://github.com/mkahvi)
//
// Copyright (c) 2019 M.A.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

namespace MKAh.Types
{
	public struct Trinary : IEquatable<Trinary>
	{
		internal iTrinary Value;

		public bool True => Value == iTrinary.True;
		public bool False => Value == iTrinary.False;
		public bool Nonce => Value == iTrinary.Nonce;

		public bool Bool => Value == iTrinary.True;

		public static implicit operator Trinary(bool val)
			=> new Trinary { Value = val ? iTrinary.True : iTrinary.False };

		public static bool operator ==(Trinary left, Trinary right) => left.Equals(right);

		public static bool operator !=(Trinary left, Trinary right) => !(left == right);

		public static bool operator ==(Trinary left, bool right) => (right && left.True) || (!right && left.False);
		public static bool operator !=(Trinary left, bool right) => !(left == right);
		public static bool operator ==(bool left, Trinary right) => right == left;
		public static bool operator !=(bool left, Trinary right) => right != left;

		public bool Equals(Trinary other) => Value == other.Value;

		public bool Equals(bool other) => Bool == other;

		public override bool Equals(object obj)
		{
			if (obj is Trinary othert)
				return Equals(othert);
			else if (obj is bool otherb)
				return Equals(otherb);

			return base.Equals(obj);
		}

		// autogenerated
		public override int GetHashCode() => -1937169414 + Value.GetHashCode();

		internal enum iTrinary
		{
			False = 0,
			True = 1,
			Nonce = -1
		}
	}
}